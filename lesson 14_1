class MyMetaClass(type):
    instances = []

    def __call__(cls, *args, **kwargs):
        if len(cls.instances) > 0:
            return cls.instances[0]
        instance = super(MyMetaClass, cls).__call__(*args, **kwargs)
        cls.instances.append(instance)

        return instance

    def __new__(cls, name, base, dct, *args, **kwargs):
        return super().__new__(cls, name, base, dct)


class MyClass(object, metaclass=MyMetaClass):
    print(1)
    pass


obj1 = MyClass()
print(MyMetaClass.instances)
print(id(obj1))
obj2 = MyClass()
print(id(obj2))
obj3 = MyClass()
print(id(obj3))
print(MyMetaClass.instances)
